// Code generated by protoc-gen-go. DO NOT EDIT.
// source: demo.proto

/*
Package hipstershop is a generated protocol buffer package.

It is generated from these files:
	demo.proto

It has these top-level messages:
	AddCommentRequest
	GetCommentRequest
	Comments
	Comment
	CartItem
	AddItemRequest
	EmptyCartRequest
	GetCartRequest
	Cart
	Empty
	ListRecommendationsRequest
	ListRecommendationsResponse
	Product
	ListProductsResponse
	GetProductRequest
	SearchProductsRequest
	SearchProductsResponse
	GetQuoteRequest
	GetQuoteResponse
	ShipOrderRequest
	ShipOrderResponse
	Address
	Money
	GetSupportedCurrenciesResponse
	CurrencyConversionRequest
	CreditCardInfo
	ChargeRequest
	ChargeResponse
	OrderItem
	OrderResult
	SendOrderConfirmationRequest
	PlaceOrderRequest
	PlaceOrderResponse
	AdRequest
	AdResponse
	Ad
*/
package hipstershop

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddCommentRequest struct {
	Comment *Comment `protobuf:"bytes,1,opt,name=comment" json:"comment,omitempty"`
}

func (m *AddCommentRequest) Reset()                    { *m = AddCommentRequest{} }
func (m *AddCommentRequest) String() string            { return proto.CompactTextString(m) }
func (*AddCommentRequest) ProtoMessage()               {}
func (*AddCommentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddCommentRequest) GetComment() *Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

type GetCommentRequest struct {
	ProductId string `protobuf:"bytes,1,opt,name=product_id,json=productId" json:"product_id,omitempty"`
}

func (m *GetCommentRequest) Reset()                    { *m = GetCommentRequest{} }
func (m *GetCommentRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCommentRequest) ProtoMessage()               {}
func (*GetCommentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetCommentRequest) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

type Comments struct {
	Comment []*Comment `protobuf:"bytes,1,rep,name=comment" json:"comment,omitempty"`
}

func (m *Comments) Reset()                    { *m = Comments{} }
func (m *Comments) String() string            { return proto.CompactTextString(m) }
func (*Comments) ProtoMessage()               {}
func (*Comments) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Comments) GetComment() []*Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

type Comment struct {
	UserName    string `protobuf:"bytes,1,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	Date        string `protobuf:"bytes,2,opt,name=date" json:"date,omitempty"`
	CommentText string `protobuf:"bytes,3,opt,name=comment_text,json=commentText" json:"comment_text,omitempty"`
	ProductId   string `protobuf:"bytes,4,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	Stars       int32  `protobuf:"varint,5,opt,name=stars" json:"stars,omitempty"`
}

func (m *Comment) Reset()                    { *m = Comment{} }
func (m *Comment) String() string            { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()               {}
func (*Comment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Comment) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *Comment) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *Comment) GetCommentText() string {
	if m != nil {
		return m.CommentText
	}
	return ""
}

func (m *Comment) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *Comment) GetStars() int32 {
	if m != nil {
		return m.Stars
	}
	return 0
}

type CartItem struct {
	ProductId string `protobuf:"bytes,1,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	Quantity  int32  `protobuf:"varint,2,opt,name=quantity" json:"quantity,omitempty"`
}

func (m *CartItem) Reset()                    { *m = CartItem{} }
func (m *CartItem) String() string            { return proto.CompactTextString(m) }
func (*CartItem) ProtoMessage()               {}
func (*CartItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CartItem) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *CartItem) GetQuantity() int32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

type AddItemRequest struct {
	UserId string    `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Item   *CartItem `protobuf:"bytes,2,opt,name=item" json:"item,omitempty"`
}

func (m *AddItemRequest) Reset()                    { *m = AddItemRequest{} }
func (m *AddItemRequest) String() string            { return proto.CompactTextString(m) }
func (*AddItemRequest) ProtoMessage()               {}
func (*AddItemRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AddItemRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *AddItemRequest) GetItem() *CartItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type EmptyCartRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *EmptyCartRequest) Reset()                    { *m = EmptyCartRequest{} }
func (m *EmptyCartRequest) String() string            { return proto.CompactTextString(m) }
func (*EmptyCartRequest) ProtoMessage()               {}
func (*EmptyCartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *EmptyCartRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type GetCartRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetCartRequest) Reset()                    { *m = GetCartRequest{} }
func (m *GetCartRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCartRequest) ProtoMessage()               {}
func (*GetCartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetCartRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type Cart struct {
	UserId string      `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Items  []*CartItem `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (m *Cart) Reset()                    { *m = Cart{} }
func (m *Cart) String() string            { return proto.CompactTextString(m) }
func (*Cart) ProtoMessage()               {}
func (*Cart) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Cart) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Cart) GetItems() []*CartItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type ListRecommendationsRequest struct {
	UserId     string   `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ProductIds []string `protobuf:"bytes,2,rep,name=product_ids,json=productIds" json:"product_ids,omitempty"`
}

func (m *ListRecommendationsRequest) Reset()                    { *m = ListRecommendationsRequest{} }
func (m *ListRecommendationsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRecommendationsRequest) ProtoMessage()               {}
func (*ListRecommendationsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ListRecommendationsRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ListRecommendationsRequest) GetProductIds() []string {
	if m != nil {
		return m.ProductIds
	}
	return nil
}

type ListRecommendationsResponse struct {
	ProductIds []string `protobuf:"bytes,1,rep,name=product_ids,json=productIds" json:"product_ids,omitempty"`
}

func (m *ListRecommendationsResponse) Reset()                    { *m = ListRecommendationsResponse{} }
func (m *ListRecommendationsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListRecommendationsResponse) ProtoMessage()               {}
func (*ListRecommendationsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ListRecommendationsResponse) GetProductIds() []string {
	if m != nil {
		return m.ProductIds
	}
	return nil
}

type Product struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Picture     string `protobuf:"bytes,4,opt,name=picture" json:"picture,omitempty"`
	PriceUsd    *Money `protobuf:"bytes,5,opt,name=price_usd,json=priceUsd" json:"price_usd,omitempty"`
	// Categories such as "vintage" or "gardening" that can be used to look up
	// other related products.
	Categories []string `protobuf:"bytes,6,rep,name=categories" json:"categories,omitempty"`
}

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Product) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Product) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Product) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Product) GetPicture() string {
	if m != nil {
		return m.Picture
	}
	return ""
}

func (m *Product) GetPriceUsd() *Money {
	if m != nil {
		return m.PriceUsd
	}
	return nil
}

func (m *Product) GetCategories() []string {
	if m != nil {
		return m.Categories
	}
	return nil
}

type ListProductsResponse struct {
	Products []*Product `protobuf:"bytes,1,rep,name=products" json:"products,omitempty"`
}

func (m *ListProductsResponse) Reset()                    { *m = ListProductsResponse{} }
func (m *ListProductsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListProductsResponse) ProtoMessage()               {}
func (*ListProductsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ListProductsResponse) GetProducts() []*Product {
	if m != nil {
		return m.Products
	}
	return nil
}

type GetProductRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetProductRequest) Reset()                    { *m = GetProductRequest{} }
func (m *GetProductRequest) String() string            { return proto.CompactTextString(m) }
func (*GetProductRequest) ProtoMessage()               {}
func (*GetProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetProductRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SearchProductsRequest struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *SearchProductsRequest) Reset()                    { *m = SearchProductsRequest{} }
func (m *SearchProductsRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchProductsRequest) ProtoMessage()               {}
func (*SearchProductsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *SearchProductsRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type SearchProductsResponse struct {
	Results []*Product `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *SearchProductsResponse) Reset()                    { *m = SearchProductsResponse{} }
func (m *SearchProductsResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchProductsResponse) ProtoMessage()               {}
func (*SearchProductsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *SearchProductsResponse) GetResults() []*Product {
	if m != nil {
		return m.Results
	}
	return nil
}

type GetQuoteRequest struct {
	Address *Address    `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Items   []*CartItem `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (m *GetQuoteRequest) Reset()                    { *m = GetQuoteRequest{} }
func (m *GetQuoteRequest) String() string            { return proto.CompactTextString(m) }
func (*GetQuoteRequest) ProtoMessage()               {}
func (*GetQuoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetQuoteRequest) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *GetQuoteRequest) GetItems() []*CartItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type GetQuoteResponse struct {
	CostUsd *Money `protobuf:"bytes,1,opt,name=cost_usd,json=costUsd" json:"cost_usd,omitempty"`
}

func (m *GetQuoteResponse) Reset()                    { *m = GetQuoteResponse{} }
func (m *GetQuoteResponse) String() string            { return proto.CompactTextString(m) }
func (*GetQuoteResponse) ProtoMessage()               {}
func (*GetQuoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetQuoteResponse) GetCostUsd() *Money {
	if m != nil {
		return m.CostUsd
	}
	return nil
}

type ShipOrderRequest struct {
	Address *Address    `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Items   []*CartItem `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (m *ShipOrderRequest) Reset()                    { *m = ShipOrderRequest{} }
func (m *ShipOrderRequest) String() string            { return proto.CompactTextString(m) }
func (*ShipOrderRequest) ProtoMessage()               {}
func (*ShipOrderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ShipOrderRequest) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *ShipOrderRequest) GetItems() []*CartItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type ShipOrderResponse struct {
	TrackingId string `protobuf:"bytes,1,opt,name=tracking_id,json=trackingId" json:"tracking_id,omitempty"`
}

func (m *ShipOrderResponse) Reset()                    { *m = ShipOrderResponse{} }
func (m *ShipOrderResponse) String() string            { return proto.CompactTextString(m) }
func (*ShipOrderResponse) ProtoMessage()               {}
func (*ShipOrderResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ShipOrderResponse) GetTrackingId() string {
	if m != nil {
		return m.TrackingId
	}
	return ""
}

type Address struct {
	StreetAddress string `protobuf:"bytes,1,opt,name=street_address,json=streetAddress" json:"street_address,omitempty"`
	City          string `protobuf:"bytes,2,opt,name=city" json:"city,omitempty"`
	State         string `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	Country       string `protobuf:"bytes,4,opt,name=country" json:"country,omitempty"`
	ZipCode       int32  `protobuf:"varint,5,opt,name=zip_code,json=zipCode" json:"zip_code,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Address) GetStreetAddress() string {
	if m != nil {
		return m.StreetAddress
	}
	return ""
}

func (m *Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Address) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Address) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Address) GetZipCode() int32 {
	if m != nil {
		return m.ZipCode
	}
	return 0
}

// Represents an amount of money with its currency type.
type Money struct {
	// The 3-letter currency code defined in ISO 4217.
	CurrencyCode string `protobuf:"bytes,1,opt,name=currency_code,json=currencyCode" json:"currency_code,omitempty"`
	// The whole units of the amount.
	// For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
	Units int64 `protobuf:"varint,2,opt,name=units" json:"units,omitempty"`
	// Number of nano (10^-9) units of the amount.
	// The value must be between -999,999,999 and +999,999,999 inclusive.
	// If `units` is positive, `nanos` must be positive or zero.
	// If `units` is zero, `nanos` can be positive, zero, or negative.
	// If `units` is negative, `nanos` must be negative or zero.
	// For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
	Nanos int32 `protobuf:"varint,3,opt,name=nanos" json:"nanos,omitempty"`
}

func (m *Money) Reset()                    { *m = Money{} }
func (m *Money) String() string            { return proto.CompactTextString(m) }
func (*Money) ProtoMessage()               {}
func (*Money) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Money) GetCurrencyCode() string {
	if m != nil {
		return m.CurrencyCode
	}
	return ""
}

func (m *Money) GetUnits() int64 {
	if m != nil {
		return m.Units
	}
	return 0
}

func (m *Money) GetNanos() int32 {
	if m != nil {
		return m.Nanos
	}
	return 0
}

type GetSupportedCurrenciesResponse struct {
	// The 3-letter currency code defined in ISO 4217.
	CurrencyCodes []string `protobuf:"bytes,1,rep,name=currency_codes,json=currencyCodes" json:"currency_codes,omitempty"`
}

func (m *GetSupportedCurrenciesResponse) Reset()                    { *m = GetSupportedCurrenciesResponse{} }
func (m *GetSupportedCurrenciesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSupportedCurrenciesResponse) ProtoMessage()               {}
func (*GetSupportedCurrenciesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *GetSupportedCurrenciesResponse) GetCurrencyCodes() []string {
	if m != nil {
		return m.CurrencyCodes
	}
	return nil
}

type CurrencyConversionRequest struct {
	From *Money `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	// The 3-letter currency code defined in ISO 4217.
	ToCode string `protobuf:"bytes,2,opt,name=to_code,json=toCode" json:"to_code,omitempty"`
}

func (m *CurrencyConversionRequest) Reset()                    { *m = CurrencyConversionRequest{} }
func (m *CurrencyConversionRequest) String() string            { return proto.CompactTextString(m) }
func (*CurrencyConversionRequest) ProtoMessage()               {}
func (*CurrencyConversionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *CurrencyConversionRequest) GetFrom() *Money {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *CurrencyConversionRequest) GetToCode() string {
	if m != nil {
		return m.ToCode
	}
	return ""
}

type CreditCardInfo struct {
	CreditCardNumber          string `protobuf:"bytes,1,opt,name=credit_card_number,json=creditCardNumber" json:"credit_card_number,omitempty"`
	CreditCardCvv             int32  `protobuf:"varint,2,opt,name=credit_card_cvv,json=creditCardCvv" json:"credit_card_cvv,omitempty"`
	CreditCardExpirationYear  int32  `protobuf:"varint,3,opt,name=credit_card_expiration_year,json=creditCardExpirationYear" json:"credit_card_expiration_year,omitempty"`
	CreditCardExpirationMonth int32  `protobuf:"varint,4,opt,name=credit_card_expiration_month,json=creditCardExpirationMonth" json:"credit_card_expiration_month,omitempty"`
}

func (m *CreditCardInfo) Reset()                    { *m = CreditCardInfo{} }
func (m *CreditCardInfo) String() string            { return proto.CompactTextString(m) }
func (*CreditCardInfo) ProtoMessage()               {}
func (*CreditCardInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *CreditCardInfo) GetCreditCardNumber() string {
	if m != nil {
		return m.CreditCardNumber
	}
	return ""
}

func (m *CreditCardInfo) GetCreditCardCvv() int32 {
	if m != nil {
		return m.CreditCardCvv
	}
	return 0
}

func (m *CreditCardInfo) GetCreditCardExpirationYear() int32 {
	if m != nil {
		return m.CreditCardExpirationYear
	}
	return 0
}

func (m *CreditCardInfo) GetCreditCardExpirationMonth() int32 {
	if m != nil {
		return m.CreditCardExpirationMonth
	}
	return 0
}

type ChargeRequest struct {
	Amount     *Money          `protobuf:"bytes,1,opt,name=amount" json:"amount,omitempty"`
	CreditCard *CreditCardInfo `protobuf:"bytes,2,opt,name=credit_card,json=creditCard" json:"credit_card,omitempty"`
}

func (m *ChargeRequest) Reset()                    { *m = ChargeRequest{} }
func (m *ChargeRequest) String() string            { return proto.CompactTextString(m) }
func (*ChargeRequest) ProtoMessage()               {}
func (*ChargeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ChargeRequest) GetAmount() *Money {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *ChargeRequest) GetCreditCard() *CreditCardInfo {
	if m != nil {
		return m.CreditCard
	}
	return nil
}

type ChargeResponse struct {
	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
}

func (m *ChargeResponse) Reset()                    { *m = ChargeResponse{} }
func (m *ChargeResponse) String() string            { return proto.CompactTextString(m) }
func (*ChargeResponse) ProtoMessage()               {}
func (*ChargeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ChargeResponse) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

type OrderItem struct {
	Item *CartItem `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
	Cost *Money    `protobuf:"bytes,2,opt,name=cost" json:"cost,omitempty"`
}

func (m *OrderItem) Reset()                    { *m = OrderItem{} }
func (m *OrderItem) String() string            { return proto.CompactTextString(m) }
func (*OrderItem) ProtoMessage()               {}
func (*OrderItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *OrderItem) GetItem() *CartItem {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *OrderItem) GetCost() *Money {
	if m != nil {
		return m.Cost
	}
	return nil
}

type OrderResult struct {
	OrderId            string       `protobuf:"bytes,1,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	ShippingTrackingId string       `protobuf:"bytes,2,opt,name=shipping_tracking_id,json=shippingTrackingId" json:"shipping_tracking_id,omitempty"`
	ShippingCost       *Money       `protobuf:"bytes,3,opt,name=shipping_cost,json=shippingCost" json:"shipping_cost,omitempty"`
	ShippingAddress    *Address     `protobuf:"bytes,4,opt,name=shipping_address,json=shippingAddress" json:"shipping_address,omitempty"`
	Items              []*OrderItem `protobuf:"bytes,5,rep,name=items" json:"items,omitempty"`
}

func (m *OrderResult) Reset()                    { *m = OrderResult{} }
func (m *OrderResult) String() string            { return proto.CompactTextString(m) }
func (*OrderResult) ProtoMessage()               {}
func (*OrderResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *OrderResult) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *OrderResult) GetShippingTrackingId() string {
	if m != nil {
		return m.ShippingTrackingId
	}
	return ""
}

func (m *OrderResult) GetShippingCost() *Money {
	if m != nil {
		return m.ShippingCost
	}
	return nil
}

func (m *OrderResult) GetShippingAddress() *Address {
	if m != nil {
		return m.ShippingAddress
	}
	return nil
}

func (m *OrderResult) GetItems() []*OrderItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type SendOrderConfirmationRequest struct {
	Email string       `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Order *OrderResult `protobuf:"bytes,2,opt,name=order" json:"order,omitempty"`
}

func (m *SendOrderConfirmationRequest) Reset()                    { *m = SendOrderConfirmationRequest{} }
func (m *SendOrderConfirmationRequest) String() string            { return proto.CompactTextString(m) }
func (*SendOrderConfirmationRequest) ProtoMessage()               {}
func (*SendOrderConfirmationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *SendOrderConfirmationRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *SendOrderConfirmationRequest) GetOrder() *OrderResult {
	if m != nil {
		return m.Order
	}
	return nil
}

type PlaceOrderRequest struct {
	UserId       string          `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserCurrency string          `protobuf:"bytes,2,opt,name=user_currency,json=userCurrency" json:"user_currency,omitempty"`
	Address      *Address        `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
	Email        string          `protobuf:"bytes,5,opt,name=email" json:"email,omitempty"`
	CreditCard   *CreditCardInfo `protobuf:"bytes,6,opt,name=credit_card,json=creditCard" json:"credit_card,omitempty"`
}

func (m *PlaceOrderRequest) Reset()                    { *m = PlaceOrderRequest{} }
func (m *PlaceOrderRequest) String() string            { return proto.CompactTextString(m) }
func (*PlaceOrderRequest) ProtoMessage()               {}
func (*PlaceOrderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *PlaceOrderRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *PlaceOrderRequest) GetUserCurrency() string {
	if m != nil {
		return m.UserCurrency
	}
	return ""
}

func (m *PlaceOrderRequest) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *PlaceOrderRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *PlaceOrderRequest) GetCreditCard() *CreditCardInfo {
	if m != nil {
		return m.CreditCard
	}
	return nil
}

type PlaceOrderResponse struct {
	Order *OrderResult `protobuf:"bytes,1,opt,name=order" json:"order,omitempty"`
}

func (m *PlaceOrderResponse) Reset()                    { *m = PlaceOrderResponse{} }
func (m *PlaceOrderResponse) String() string            { return proto.CompactTextString(m) }
func (*PlaceOrderResponse) ProtoMessage()               {}
func (*PlaceOrderResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *PlaceOrderResponse) GetOrder() *OrderResult {
	if m != nil {
		return m.Order
	}
	return nil
}

type AdRequest struct {
	// List of important key words from the current page describing the context.
	ContextKeys []string `protobuf:"bytes,1,rep,name=context_keys,json=contextKeys" json:"context_keys,omitempty"`
}

func (m *AdRequest) Reset()                    { *m = AdRequest{} }
func (m *AdRequest) String() string            { return proto.CompactTextString(m) }
func (*AdRequest) ProtoMessage()               {}
func (*AdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *AdRequest) GetContextKeys() []string {
	if m != nil {
		return m.ContextKeys
	}
	return nil
}

type AdResponse struct {
	Ads []*Ad `protobuf:"bytes,1,rep,name=ads" json:"ads,omitempty"`
}

func (m *AdResponse) Reset()                    { *m = AdResponse{} }
func (m *AdResponse) String() string            { return proto.CompactTextString(m) }
func (*AdResponse) ProtoMessage()               {}
func (*AdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *AdResponse) GetAds() []*Ad {
	if m != nil {
		return m.Ads
	}
	return nil
}

type Ad struct {
	// url to redirect to when an ad is clicked.
	RedirectUrl string `protobuf:"bytes,1,opt,name=redirect_url,json=redirectUrl" json:"redirect_url,omitempty"`
	// short advertisement text to display.
	Text string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
}

func (m *Ad) Reset()                    { *m = Ad{} }
func (m *Ad) String() string            { return proto.CompactTextString(m) }
func (*Ad) ProtoMessage()               {}
func (*Ad) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *Ad) GetRedirectUrl() string {
	if m != nil {
		return m.RedirectUrl
	}
	return ""
}

func (m *Ad) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*AddCommentRequest)(nil), "hipstershop.AddCommentRequest")
	proto.RegisterType((*GetCommentRequest)(nil), "hipstershop.GetCommentRequest")
	proto.RegisterType((*Comments)(nil), "hipstershop.Comments")
	proto.RegisterType((*Comment)(nil), "hipstershop.Comment")
	proto.RegisterType((*CartItem)(nil), "hipstershop.CartItem")
	proto.RegisterType((*AddItemRequest)(nil), "hipstershop.AddItemRequest")
	proto.RegisterType((*EmptyCartRequest)(nil), "hipstershop.EmptyCartRequest")
	proto.RegisterType((*GetCartRequest)(nil), "hipstershop.GetCartRequest")
	proto.RegisterType((*Cart)(nil), "hipstershop.Cart")
	proto.RegisterType((*Empty)(nil), "hipstershop.Empty")
	proto.RegisterType((*ListRecommendationsRequest)(nil), "hipstershop.ListRecommendationsRequest")
	proto.RegisterType((*ListRecommendationsResponse)(nil), "hipstershop.ListRecommendationsResponse")
	proto.RegisterType((*Product)(nil), "hipstershop.Product")
	proto.RegisterType((*ListProductsResponse)(nil), "hipstershop.ListProductsResponse")
	proto.RegisterType((*GetProductRequest)(nil), "hipstershop.GetProductRequest")
	proto.RegisterType((*SearchProductsRequest)(nil), "hipstershop.SearchProductsRequest")
	proto.RegisterType((*SearchProductsResponse)(nil), "hipstershop.SearchProductsResponse")
	proto.RegisterType((*GetQuoteRequest)(nil), "hipstershop.GetQuoteRequest")
	proto.RegisterType((*GetQuoteResponse)(nil), "hipstershop.GetQuoteResponse")
	proto.RegisterType((*ShipOrderRequest)(nil), "hipstershop.ShipOrderRequest")
	proto.RegisterType((*ShipOrderResponse)(nil), "hipstershop.ShipOrderResponse")
	proto.RegisterType((*Address)(nil), "hipstershop.Address")
	proto.RegisterType((*Money)(nil), "hipstershop.Money")
	proto.RegisterType((*GetSupportedCurrenciesResponse)(nil), "hipstershop.GetSupportedCurrenciesResponse")
	proto.RegisterType((*CurrencyConversionRequest)(nil), "hipstershop.CurrencyConversionRequest")
	proto.RegisterType((*CreditCardInfo)(nil), "hipstershop.CreditCardInfo")
	proto.RegisterType((*ChargeRequest)(nil), "hipstershop.ChargeRequest")
	proto.RegisterType((*ChargeResponse)(nil), "hipstershop.ChargeResponse")
	proto.RegisterType((*OrderItem)(nil), "hipstershop.OrderItem")
	proto.RegisterType((*OrderResult)(nil), "hipstershop.OrderResult")
	proto.RegisterType((*SendOrderConfirmationRequest)(nil), "hipstershop.SendOrderConfirmationRequest")
	proto.RegisterType((*PlaceOrderRequest)(nil), "hipstershop.PlaceOrderRequest")
	proto.RegisterType((*PlaceOrderResponse)(nil), "hipstershop.PlaceOrderResponse")
	proto.RegisterType((*AdRequest)(nil), "hipstershop.AdRequest")
	proto.RegisterType((*AdResponse)(nil), "hipstershop.AdResponse")
	proto.RegisterType((*Ad)(nil), "hipstershop.Ad")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CommentService service

type CommentServiceClient interface {
	GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*Comments, error)
	AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*Comments, error)
}

type commentServiceClient struct {
	cc *grpc.ClientConn
}

func NewCommentServiceClient(cc *grpc.ClientConn) CommentServiceClient {
	return &commentServiceClient{cc}
}

func (c *commentServiceClient) GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*Comments, error) {
	out := new(Comments)
	err := grpc.Invoke(ctx, "/hipstershop.CommentService/GetComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*Comments, error) {
	out := new(Comments)
	err := grpc.Invoke(ctx, "/hipstershop.CommentService/AddComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CommentService service

type CommentServiceServer interface {
	GetComment(context.Context, *GetCommentRequest) (*Comments, error)
	AddComment(context.Context, *AddCommentRequest) (*Comments, error)
}

func RegisterCommentServiceServer(s *grpc.Server, srv CommentServiceServer) {
	s.RegisterService(&_CommentService_serviceDesc, srv)
}

func _CommentService_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hipstershop.CommentService/GetComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetComment(ctx, req.(*GetCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hipstershop.CommentService/AddComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).AddComment(ctx, req.(*AddCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hipstershop.CommentService",
	HandlerType: (*CommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComment",
			Handler:    _CommentService_GetComment_Handler,
		},
		{
			MethodName: "AddComment",
			Handler:    _CommentService_AddComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo.proto",
}

// Client API for CartService service

type CartServiceClient interface {
	AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*Empty, error)
	GetCart(ctx context.Context, in *GetCartRequest, opts ...grpc.CallOption) (*Cart, error)
	EmptyCart(ctx context.Context, in *EmptyCartRequest, opts ...grpc.CallOption) (*Empty, error)
}

type cartServiceClient struct {
	cc *grpc.ClientConn
}

func NewCartServiceClient(cc *grpc.ClientConn) CartServiceClient {
	return &cartServiceClient{cc}
}

func (c *cartServiceClient) AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/hipstershop.CartService/AddItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) GetCart(ctx context.Context, in *GetCartRequest, opts ...grpc.CallOption) (*Cart, error) {
	out := new(Cart)
	err := grpc.Invoke(ctx, "/hipstershop.CartService/GetCart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) EmptyCart(ctx context.Context, in *EmptyCartRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/hipstershop.CartService/EmptyCart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CartService service

type CartServiceServer interface {
	AddItem(context.Context, *AddItemRequest) (*Empty, error)
	GetCart(context.Context, *GetCartRequest) (*Cart, error)
	EmptyCart(context.Context, *EmptyCartRequest) (*Empty, error)
}

func RegisterCartServiceServer(s *grpc.Server, srv CartServiceServer) {
	s.RegisterService(&_CartService_serviceDesc, srv)
}

func _CartService_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hipstershop.CartService/AddItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).AddItem(ctx, req.(*AddItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_GetCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).GetCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hipstershop.CartService/GetCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).GetCart(ctx, req.(*GetCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_EmptyCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).EmptyCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hipstershop.CartService/EmptyCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).EmptyCart(ctx, req.(*EmptyCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CartService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hipstershop.CartService",
	HandlerType: (*CartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddItem",
			Handler:    _CartService_AddItem_Handler,
		},
		{
			MethodName: "GetCart",
			Handler:    _CartService_GetCart_Handler,
		},
		{
			MethodName: "EmptyCart",
			Handler:    _CartService_EmptyCart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo.proto",
}

// Client API for RecommendationService service

type RecommendationServiceClient interface {
	ListRecommendations(ctx context.Context, in *ListRecommendationsRequest, opts ...grpc.CallOption) (*ListRecommendationsResponse, error)
}

type recommendationServiceClient struct {
	cc *grpc.ClientConn
}

func NewRecommendationServiceClient(cc *grpc.ClientConn) RecommendationServiceClient {
	return &recommendationServiceClient{cc}
}

func (c *recommendationServiceClient) ListRecommendations(ctx context.Context, in *ListRecommendationsRequest, opts ...grpc.CallOption) (*ListRecommendationsResponse, error) {
	out := new(ListRecommendationsResponse)
	err := grpc.Invoke(ctx, "/hipstershop.RecommendationService/ListRecommendations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RecommendationService service

type RecommendationServiceServer interface {
	ListRecommendations(context.Context, *ListRecommendationsRequest) (*ListRecommendationsResponse, error)
}

func RegisterRecommendationServiceServer(s *grpc.Server, srv RecommendationServiceServer) {
	s.RegisterService(&_RecommendationService_serviceDesc, srv)
}

func _RecommendationService_ListRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).ListRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hipstershop.RecommendationService/ListRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).ListRecommendations(ctx, req.(*ListRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RecommendationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hipstershop.RecommendationService",
	HandlerType: (*RecommendationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRecommendations",
			Handler:    _RecommendationService_ListRecommendations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo.proto",
}

// Client API for ProductCatalogService service

type ProductCatalogServiceClient interface {
	ListProducts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListProductsResponse, error)
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*Product, error)
	SearchProducts(ctx context.Context, in *SearchProductsRequest, opts ...grpc.CallOption) (*SearchProductsResponse, error)
}

type productCatalogServiceClient struct {
	cc *grpc.ClientConn
}

func NewProductCatalogServiceClient(cc *grpc.ClientConn) ProductCatalogServiceClient {
	return &productCatalogServiceClient{cc}
}

func (c *productCatalogServiceClient) ListProducts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListProductsResponse, error) {
	out := new(ListProductsResponse)
	err := grpc.Invoke(ctx, "/hipstershop.ProductCatalogService/ListProducts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogServiceClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := grpc.Invoke(ctx, "/hipstershop.ProductCatalogService/GetProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogServiceClient) SearchProducts(ctx context.Context, in *SearchProductsRequest, opts ...grpc.CallOption) (*SearchProductsResponse, error) {
	out := new(SearchProductsResponse)
	err := grpc.Invoke(ctx, "/hipstershop.ProductCatalogService/SearchProducts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductCatalogService service

type ProductCatalogServiceServer interface {
	ListProducts(context.Context, *Empty) (*ListProductsResponse, error)
	GetProduct(context.Context, *GetProductRequest) (*Product, error)
	SearchProducts(context.Context, *SearchProductsRequest) (*SearchProductsResponse, error)
}

func RegisterProductCatalogServiceServer(s *grpc.Server, srv ProductCatalogServiceServer) {
	s.RegisterService(&_ProductCatalogService_serviceDesc, srv)
}

func _ProductCatalogService_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hipstershop.ProductCatalogService/ListProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).ListProducts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalogService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hipstershop.ProductCatalogService/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalogService_SearchProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServiceServer).SearchProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hipstershop.ProductCatalogService/SearchProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServiceServer).SearchProducts(ctx, req.(*SearchProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProductCatalogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hipstershop.ProductCatalogService",
	HandlerType: (*ProductCatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProducts",
			Handler:    _ProductCatalogService_ListProducts_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _ProductCatalogService_GetProduct_Handler,
		},
		{
			MethodName: "SearchProducts",
			Handler:    _ProductCatalogService_SearchProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo.proto",
}

// Client API for ShippingService service

type ShippingServiceClient interface {
	GetQuote(ctx context.Context, in *GetQuoteRequest, opts ...grpc.CallOption) (*GetQuoteResponse, error)
	ShipOrder(ctx context.Context, in *ShipOrderRequest, opts ...grpc.CallOption) (*ShipOrderResponse, error)
}

type shippingServiceClient struct {
	cc *grpc.ClientConn
}

func NewShippingServiceClient(cc *grpc.ClientConn) ShippingServiceClient {
	return &shippingServiceClient{cc}
}

func (c *shippingServiceClient) GetQuote(ctx context.Context, in *GetQuoteRequest, opts ...grpc.CallOption) (*GetQuoteResponse, error) {
	out := new(GetQuoteResponse)
	err := grpc.Invoke(ctx, "/hipstershop.ShippingService/GetQuote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) ShipOrder(ctx context.Context, in *ShipOrderRequest, opts ...grpc.CallOption) (*ShipOrderResponse, error) {
	out := new(ShipOrderResponse)
	err := grpc.Invoke(ctx, "/hipstershop.ShippingService/ShipOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShippingService service

type ShippingServiceServer interface {
	GetQuote(context.Context, *GetQuoteRequest) (*GetQuoteResponse, error)
	ShipOrder(context.Context, *ShipOrderRequest) (*ShipOrderResponse, error)
}

func RegisterShippingServiceServer(s *grpc.Server, srv ShippingServiceServer) {
	s.RegisterService(&_ShippingService_serviceDesc, srv)
}

func _ShippingService_GetQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).GetQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hipstershop.ShippingService/GetQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).GetQuote(ctx, req.(*GetQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_ShipOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShipOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).ShipOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hipstershop.ShippingService/ShipOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).ShipOrder(ctx, req.(*ShipOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShippingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hipstershop.ShippingService",
	HandlerType: (*ShippingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQuote",
			Handler:    _ShippingService_GetQuote_Handler,
		},
		{
			MethodName: "ShipOrder",
			Handler:    _ShippingService_ShipOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo.proto",
}

// Client API for CurrencyService service

type CurrencyServiceClient interface {
	GetSupportedCurrencies(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetSupportedCurrenciesResponse, error)
	Convert(ctx context.Context, in *CurrencyConversionRequest, opts ...grpc.CallOption) (*Money, error)
}

type currencyServiceClient struct {
	cc *grpc.ClientConn
}

func NewCurrencyServiceClient(cc *grpc.ClientConn) CurrencyServiceClient {
	return &currencyServiceClient{cc}
}

func (c *currencyServiceClient) GetSupportedCurrencies(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetSupportedCurrenciesResponse, error) {
	out := new(GetSupportedCurrenciesResponse)
	err := grpc.Invoke(ctx, "/hipstershop.CurrencyService/GetSupportedCurrencies", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) Convert(ctx context.Context, in *CurrencyConversionRequest, opts ...grpc.CallOption) (*Money, error) {
	out := new(Money)
	err := grpc.Invoke(ctx, "/hipstershop.CurrencyService/Convert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CurrencyService service

type CurrencyServiceServer interface {
	GetSupportedCurrencies(context.Context, *Empty) (*GetSupportedCurrenciesResponse, error)
	Convert(context.Context, *CurrencyConversionRequest) (*Money, error)
}

func RegisterCurrencyServiceServer(s *grpc.Server, srv CurrencyServiceServer) {
	s.RegisterService(&_CurrencyService_serviceDesc, srv)
}

func _CurrencyService_GetSupportedCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).GetSupportedCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hipstershop.CurrencyService/GetSupportedCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).GetSupportedCurrencies(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_Convert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyConversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).Convert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hipstershop.CurrencyService/Convert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).Convert(ctx, req.(*CurrencyConversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CurrencyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hipstershop.CurrencyService",
	HandlerType: (*CurrencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSupportedCurrencies",
			Handler:    _CurrencyService_GetSupportedCurrencies_Handler,
		},
		{
			MethodName: "Convert",
			Handler:    _CurrencyService_Convert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo.proto",
}

// Client API for PaymentService service

type PaymentServiceClient interface {
	Charge(ctx context.Context, in *ChargeRequest, opts ...grpc.CallOption) (*ChargeResponse, error)
}

type paymentServiceClient struct {
	cc *grpc.ClientConn
}

func NewPaymentServiceClient(cc *grpc.ClientConn) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) Charge(ctx context.Context, in *ChargeRequest, opts ...grpc.CallOption) (*ChargeResponse, error) {
	out := new(ChargeResponse)
	err := grpc.Invoke(ctx, "/hipstershop.PaymentService/Charge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PaymentService service

type PaymentServiceServer interface {
	Charge(context.Context, *ChargeRequest) (*ChargeResponse, error)
}

func RegisterPaymentServiceServer(s *grpc.Server, srv PaymentServiceServer) {
	s.RegisterService(&_PaymentService_serviceDesc, srv)
}

func _PaymentService_Charge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).Charge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hipstershop.PaymentService/Charge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).Charge(ctx, req.(*ChargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PaymentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hipstershop.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Charge",
			Handler:    _PaymentService_Charge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo.proto",
}

// Client API for EmailService service

type EmailServiceClient interface {
	SendOrderConfirmation(ctx context.Context, in *SendOrderConfirmationRequest, opts ...grpc.CallOption) (*Empty, error)
}

type emailServiceClient struct {
	cc *grpc.ClientConn
}

func NewEmailServiceClient(cc *grpc.ClientConn) EmailServiceClient {
	return &emailServiceClient{cc}
}

func (c *emailServiceClient) SendOrderConfirmation(ctx context.Context, in *SendOrderConfirmationRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/hipstershop.EmailService/SendOrderConfirmation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EmailService service

type EmailServiceServer interface {
	SendOrderConfirmation(context.Context, *SendOrderConfirmationRequest) (*Empty, error)
}

func RegisterEmailServiceServer(s *grpc.Server, srv EmailServiceServer) {
	s.RegisterService(&_EmailService_serviceDesc, srv)
}

func _EmailService_SendOrderConfirmation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOrderConfirmationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendOrderConfirmation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hipstershop.EmailService/SendOrderConfirmation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendOrderConfirmation(ctx, req.(*SendOrderConfirmationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EmailService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hipstershop.EmailService",
	HandlerType: (*EmailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendOrderConfirmation",
			Handler:    _EmailService_SendOrderConfirmation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo.proto",
}

// Client API for CheckoutService service

type CheckoutServiceClient interface {
	PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*PlaceOrderResponse, error)
}

type checkoutServiceClient struct {
	cc *grpc.ClientConn
}

func NewCheckoutServiceClient(cc *grpc.ClientConn) CheckoutServiceClient {
	return &checkoutServiceClient{cc}
}

func (c *checkoutServiceClient) PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*PlaceOrderResponse, error) {
	out := new(PlaceOrderResponse)
	err := grpc.Invoke(ctx, "/hipstershop.CheckoutService/PlaceOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CheckoutService service

type CheckoutServiceServer interface {
	PlaceOrder(context.Context, *PlaceOrderRequest) (*PlaceOrderResponse, error)
}

func RegisterCheckoutServiceServer(s *grpc.Server, srv CheckoutServiceServer) {
	s.RegisterService(&_CheckoutService_serviceDesc, srv)
}

func _CheckoutService_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckoutServiceServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hipstershop.CheckoutService/PlaceOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckoutServiceServer).PlaceOrder(ctx, req.(*PlaceOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CheckoutService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hipstershop.CheckoutService",
	HandlerType: (*CheckoutServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaceOrder",
			Handler:    _CheckoutService_PlaceOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo.proto",
}

// Client API for AdService service

type AdServiceClient interface {
	GetAds(ctx context.Context, in *AdRequest, opts ...grpc.CallOption) (*AdResponse, error)
}

type adServiceClient struct {
	cc *grpc.ClientConn
}

func NewAdServiceClient(cc *grpc.ClientConn) AdServiceClient {
	return &adServiceClient{cc}
}

func (c *adServiceClient) GetAds(ctx context.Context, in *AdRequest, opts ...grpc.CallOption) (*AdResponse, error) {
	out := new(AdResponse)
	err := grpc.Invoke(ctx, "/hipstershop.AdService/GetAds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AdService service

type AdServiceServer interface {
	GetAds(context.Context, *AdRequest) (*AdResponse, error)
}

func RegisterAdServiceServer(s *grpc.Server, srv AdServiceServer) {
	s.RegisterService(&_AdService_serviceDesc, srv)
}

func _AdService_GetAds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdServiceServer).GetAds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hipstershop.AdService/GetAds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdServiceServer).GetAds(ctx, req.(*AdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hipstershop.AdService",
	HandlerType: (*AdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAds",
			Handler:    _AdService_GetAds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo.proto",
}

func init() { proto.RegisterFile("demo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1637 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xef, 0x6e, 0x14, 0x47,
	0x12, 0xf7, 0xd8, 0xde, 0x7f, 0xb5, 0xde, 0xb5, 0xdd, 0x67, 0x9b, 0x65, 0x0d, 0x06, 0xda, 0x82,
	0x83, 0x03, 0x0c, 0xda, 0x3b, 0x09, 0xe9, 0xe0, 0x8e, 0xb3, 0x16, 0xcb, 0xac, 0x8e, 0x7f, 0x19,
	0xe3, 0x88, 0x88, 0x28, 0xab, 0x61, 0xba, 0xf1, 0x4e, 0xf0, 0xce, 0x0c, 0xdd, 0x3d, 0x16, 0xcb,
	0xc7, 0xe4, 0x01, 0x22, 0xe5, 0x01, 0xf2, 0x00, 0x79, 0x81, 0x48, 0x79, 0x84, 0x7c, 0xcf, 0x2b,
	0xe4, 0x39, 0xa2, 0xee, 0xe9, 0x9e, 0x7f, 0x3b, 0x6b, 0xc3, 0x97, 0x7c, 0xdb, 0xae, 0xae, 0xae,
	0xfa, 0x75, 0x75, 0xd5, 0xaf, 0x6a, 0x16, 0x80, 0xd0, 0x71, 0xb0, 0x13, 0xb2, 0x40, 0x04, 0xa8,
	0x39, 0xf2, 0x42, 0x2e, 0x28, 0xe3, 0xa3, 0x20, 0xc4, 0x7d, 0x58, 0xdd, 0x25, 0xa4, 0x1f, 0x8c,
	0xc7, 0xd4, 0x17, 0x36, 0x7d, 0x1f, 0x51, 0x2e, 0xd0, 0x0e, 0xd4, 0xdc, 0x58, 0xd2, 0xb1, 0x2e,
	0x5b, 0xd7, 0x9b, 0xbd, 0xb5, 0x9d, 0xcc, 0x99, 0x1d, 0xa3, 0x6d, 0x94, 0x70, 0x0f, 0x56, 0xf7,
	0xa9, 0x28, 0x18, 0xb9, 0x08, 0x10, 0xb2, 0x80, 0x44, 0xae, 0x18, 0x7a, 0x44, 0xd9, 0x69, 0xd8,
	0x0d, 0x2d, 0x19, 0x10, 0xfc, 0x6f, 0xa8, 0xeb, 0x03, 0x3c, 0xef, 0x6f, 0xe1, 0x6c, 0x7f, 0x3f,
	0x5a, 0x50, 0xd3, 0x42, 0xb4, 0x09, 0x8d, 0x88, 0x53, 0x36, 0xf4, 0x9d, 0x31, 0xd5, 0x5e, 0xea,
	0x52, 0xf0, 0xcc, 0x19, 0x53, 0x84, 0x60, 0x91, 0x38, 0x82, 0x76, 0xe6, 0x95, 0x5c, 0xfd, 0x46,
	0x57, 0x60, 0x49, 0xdb, 0x19, 0x0a, 0xfa, 0x41, 0x74, 0x16, 0xd4, 0x5e, 0x53, 0xcb, 0x5e, 0xd2,
	0x0f, 0x45, 0xe8, 0x8b, 0x05, 0xe8, 0x68, 0x0d, 0x2a, 0x5c, 0x38, 0x8c, 0x77, 0x2a, 0x97, 0xad,
	0xeb, 0x15, 0x3b, 0x5e, 0xe0, 0x3d, 0xa8, 0xf7, 0x1d, 0x26, 0x06, 0x82, 0x8e, 0xcf, 0xb8, 0x3b,
	0xea, 0x42, 0xfd, 0x7d, 0xe4, 0xf8, 0xc2, 0x13, 0x13, 0x05, 0xad, 0x62, 0x27, 0x6b, 0xfc, 0x12,
	0xda, 0xbb, 0x84, 0x48, 0x2b, 0x26, 0x90, 0xe7, 0xa0, 0xa6, 0x6e, 0x98, 0x58, 0xaa, 0xca, 0xe5,
	0x80, 0xa0, 0x1b, 0xb0, 0xe8, 0x09, 0x3a, 0x56, 0x26, 0x9a, 0xbd, 0xf5, 0x7c, 0xcc, 0x34, 0x14,
	0x5b, 0xa9, 0xe0, 0x9b, 0xb0, 0xb2, 0x37, 0x0e, 0xc5, 0x44, 0x8a, 0xcf, 0xb2, 0x8b, 0x6f, 0x40,
	0x5b, 0x3e, 0xe7, 0xa7, 0xa8, 0x3e, 0x81, 0x45, 0xa9, 0x37, 0x1b, 0xe3, 0x4d, 0xa8, 0x48, 0x00,
	0xbc, 0x33, 0xaf, 0x1e, 0x76, 0x06, 0xc8, 0x58, 0x07, 0xd7, 0xa0, 0xa2, 0x50, 0xe2, 0x2f, 0xa1,
	0xfb, 0xc4, 0xe3, 0xc2, 0xa6, 0xf1, 0xab, 0x10, 0x47, 0x78, 0x81, 0xcf, 0xcf, 0x0c, 0xc8, 0x25,
	0x68, 0xa6, 0x61, 0x8f, 0x5d, 0x36, 0x6c, 0x48, 0xe2, 0xce, 0xf1, 0x7f, 0x61, 0xb3, 0xd4, 0x2e,
	0x0f, 0x03, 0x9f, 0xd3, 0xe2, 0x79, 0x6b, 0xea, 0xfc, 0xaf, 0x16, 0xd4, 0x5e, 0xc4, 0x4b, 0xd4,
	0x86, 0xf9, 0x04, 0xc0, 0xbc, 0x47, 0x64, 0xae, 0xa9, 0x1c, 0xd4, 0xb9, 0x26, 0x7f, 0xa3, 0xcb,
	0xd0, 0x24, 0x94, 0xbb, 0xcc, 0x0b, 0xa5, 0x23, 0x93, 0x6a, 0x19, 0x11, 0xea, 0x40, 0x2d, 0xf4,
	0x5c, 0x11, 0x31, 0xaa, 0xf3, 0xcc, 0x2c, 0xd1, 0x1d, 0x68, 0x84, 0xcc, 0x73, 0xe9, 0x30, 0xe2,
	0x44, 0x65, 0x5a, 0xb3, 0x87, 0x72, 0xd1, 0x7b, 0x1a, 0xf8, 0x74, 0x62, 0xd7, 0x95, 0xd2, 0x21,
	0x27, 0x68, 0x0b, 0xc0, 0x75, 0x04, 0x3d, 0x0a, 0x98, 0x47, 0x79, 0xa7, 0x1a, 0x83, 0x4f, 0x25,
	0xf8, 0x31, 0xac, 0xc9, 0xcb, 0x6b, 0xfc, 0xe9, 0xad, 0xef, 0x42, 0x5d, 0x5f, 0x91, 0x97, 0x96,
	0x9f, 0x3e, 0x60, 0x27, 0x5a, 0x78, 0x5b, 0xd5, 0xbb, 0x91, 0xeb, 0x57, 0x29, 0xc4, 0x03, 0xdf,
	0x86, 0xf5, 0x03, 0xea, 0x30, 0x77, 0x94, 0x3a, 0x8c, 0x15, 0xd7, 0xa0, 0xf2, 0x3e, 0xa2, 0x6c,
	0xa2, 0x75, 0xe3, 0x05, 0x7e, 0x0c, 0x1b, 0x45, 0x75, 0x8d, 0x6f, 0x07, 0x6a, 0x8c, 0xf2, 0xe8,
	0xf8, 0x0c, 0x78, 0x46, 0x09, 0xfb, 0xb0, 0xbc, 0x4f, 0xc5, 0x17, 0x51, 0x20, 0x68, 0x86, 0xd0,
	0x1c, 0x42, 0x18, 0xe5, 0xbc, 0x94, 0xd0, 0x76, 0xe3, 0x3d, 0xdb, 0x28, 0x7d, 0x5e, 0xd6, 0xee,
	0xc2, 0x4a, 0xea, 0x4f, 0x63, 0xbe, 0x0d, 0x75, 0x37, 0xe0, 0x42, 0xbd, 0x9d, 0x35, 0xf3, 0xed,
	0x6a, 0x52, 0xe7, 0x90, 0x13, 0x1c, 0xc0, 0xca, 0xc1, 0xc8, 0x0b, 0x9f, 0x33, 0x42, 0xd9, 0x5f,
	0x82, 0xf9, 0x5f, 0xb0, 0x9a, 0x71, 0x98, 0xa6, 0xbf, 0x60, 0x8e, 0xfb, 0xce, 0xf3, 0x8f, 0xd2,
	0xda, 0x02, 0x23, 0x1a, 0x10, 0xfc, 0x83, 0x05, 0x35, 0xed, 0x17, 0x5d, 0x85, 0x36, 0x17, 0x8c,
	0x52, 0x31, 0xcc, 0xa2, 0x6c, 0xd8, 0xad, 0x58, 0x6a, 0xd4, 0x10, 0x2c, 0xba, 0x86, 0xe6, 0x1a,
	0xb6, 0xfa, 0xad, 0xf9, 0x53, 0x50, 0x5d, 0x0f, 0xf1, 0x42, 0x56, 0x82, 0x1b, 0x44, 0xbe, 0x60,
	0x13, 0x53, 0x09, 0x7a, 0x89, 0xce, 0x43, 0xfd, 0xa3, 0x17, 0x0e, 0xdd, 0x80, 0x50, 0x4d, 0xb9,
	0xb5, 0x8f, 0x5e, 0xd8, 0x0f, 0x08, 0xc5, 0xaf, 0xa0, 0xa2, 0x42, 0x89, 0xb6, 0xa1, 0xe5, 0x46,
	0x8c, 0x51, 0xdf, 0x9d, 0xc4, 0x8a, 0x31, 0x9a, 0x25, 0x23, 0x94, 0xda, 0xd2, 0x71, 0xe4, 0x7b,
	0x82, 0x2b, 0x34, 0x0b, 0x76, 0xbc, 0x90, 0x52, 0xdf, 0xf1, 0x03, 0xae, 0xe0, 0x54, 0xec, 0x78,
	0x81, 0xf7, 0x61, 0x6b, 0x9f, 0x8a, 0x83, 0x28, 0x0c, 0x03, 0x26, 0x28, 0xe9, 0xc7, 0x76, 0x3c,
	0x9a, 0xe6, 0xe5, 0x55, 0x68, 0xe7, 0x5c, 0x1a, 0xc2, 0x68, 0x65, 0x7d, 0x72, 0xfc, 0x35, 0x9c,
	0xef, 0x27, 0x02, 0xff, 0x84, 0x32, 0xee, 0x05, 0xbe, 0x79, 0xe4, 0x6b, 0xb0, 0xf8, 0x96, 0x05,
	0xe3, 0x53, 0x72, 0x44, 0xed, 0x4b, 0xca, 0x13, 0x41, 0x7c, 0xb1, 0x38, 0x92, 0x55, 0x11, 0xa8,
	0x00, 0xfc, 0x61, 0x41, 0xbb, 0xcf, 0x28, 0xf1, 0x24, 0x5f, 0x93, 0x81, 0xff, 0x36, 0x40, 0xb7,
	0x00, 0xb9, 0x4a, 0x32, 0x74, 0x1d, 0x46, 0x86, 0x7e, 0x34, 0x7e, 0x43, 0x99, 0x8e, 0xc7, 0x8a,
	0x9b, 0xe8, 0x3e, 0x53, 0x72, 0x74, 0x0d, 0x96, 0xb3, 0xda, 0xee, 0xc9, 0x89, 0x6e, 0x49, 0xad,
	0x54, 0xb5, 0x7f, 0x72, 0x82, 0xfe, 0x03, 0x9b, 0x59, 0x3d, 0xfa, 0x21, 0xf4, 0x98, 0xa2, 0xcf,
	0xe1, 0x84, 0x3a, 0x4c, 0xc7, 0xae, 0x93, 0x9e, 0xd9, 0x4b, 0x14, 0xbe, 0xa2, 0x0e, 0x43, 0x0f,
	0xe1, 0xc2, 0x8c, 0xe3, 0xe3, 0xc0, 0x17, 0x23, 0xf5, 0xe4, 0x15, 0xfb, 0x7c, 0xd9, 0xf9, 0xa7,
	0x52, 0x01, 0x4f, 0xa0, 0xd5, 0x1f, 0x39, 0xec, 0x28, 0xa9, 0xe9, 0x7f, 0x40, 0xd5, 0x19, 0xcb,
	0x0c, 0x39, 0x25, 0x78, 0x5a, 0x03, 0x3d, 0x80, 0x66, 0xc6, 0xbb, 0x6e, 0x98, 0x9b, 0xf9, 0x0a,
	0xc9, 0x05, 0xd1, 0x86, 0x14, 0x09, 0xbe, 0x07, 0x6d, 0xe3, 0x3a, 0x7d, 0x7a, 0xc1, 0x1c, 0x9f,
	0x3b, 0xae, 0xba, 0x42, 0x52, 0x2c, 0xad, 0x8c, 0x74, 0x40, 0xf0, 0x37, 0xd0, 0x50, 0x15, 0xa6,
	0x66, 0x02, 0xd3, 0xad, 0xad, 0x33, 0xbb, 0xb5, 0xcc, 0x0a, 0xc9, 0x0c, 0x1a, 0x67, 0x69, 0x56,
	0xc8, 0x7d, 0xfc, 0xdd, 0x3c, 0x34, 0x4d, 0x09, 0x47, 0xc7, 0x42, 0x16, 0x4a, 0x20, 0x97, 0x29,
	0xa0, 0x9a, 0x5a, 0x0f, 0x08, 0xba, 0x0b, 0x6b, 0x7c, 0xe4, 0x85, 0xa1, 0xac, 0xed, 0x6c, 0x91,
	0xc7, 0xd9, 0x84, 0xcc, 0xde, 0xcb, 0xa4, 0xd8, 0xd1, 0x3d, 0x68, 0x25, 0x27, 0x14, 0x9a, 0x85,
	0x99, 0x68, 0x96, 0x8c, 0x62, 0x3f, 0xe0, 0x02, 0x3d, 0x84, 0x95, 0xe4, 0xa0, 0xe1, 0x86, 0xc5,
	0x53, 0x18, 0x6c, 0xd9, 0x68, 0x1b, 0xce, 0xb8, 0x65, 0x98, 0xac, 0xa2, 0x98, 0x6c, 0x23, 0x77,
	0x2a, 0x09, 0xa8, 0xa1, 0x32, 0x02, 0x17, 0x0e, 0xa8, 0x4f, 0x94, 0xbc, 0x1f, 0xf8, 0x6f, 0x3d,
	0x36, 0x56, 0x69, 0x93, 0x69, 0x37, 0x74, 0xec, 0x78, 0xc7, 0xa6, 0xdd, 0xa8, 0x05, 0xda, 0x81,
	0x8a, 0x0a, 0x8d, 0x8e, 0x71, 0x67, 0xda, 0x47, 0x1c, 0x53, 0x3b, 0x56, 0xc3, 0xbf, 0x5b, 0xb0,
	0xfa, 0xe2, 0xd8, 0x71, 0x69, 0x8e, 0xa3, 0x67, 0x4e, 0x22, 0xdb, 0xd0, 0x52, 0x1b, 0x86, 0x0a,
	0x74, 0x9c, 0x97, 0xa4, 0xd0, 0xb0, 0x41, 0x96, 0xe1, 0x17, 0x3e, 0x85, 0xe1, 0x93, 0x9b, 0x54,
	0xb2, 0x37, 0x29, 0xe4, 0x76, 0xf5, 0xf3, 0x72, 0xfb, 0x11, 0xa0, 0xec, 0xb5, 0x92, 0x96, 0xab,
	0xa3, 0x63, 0x7d, 0x5a, 0x74, 0x76, 0xa0, 0xb1, 0x4b, 0x4c, 0x50, 0xd4, 0x80, 0xed, 0xcb, 0xd9,
	0x7a, 0xf8, 0x8e, 0x4e, 0x0c, 0x2b, 0x36, 0xb5, 0xec, 0xff, 0x74, 0xc2, 0xf1, 0x1d, 0x00, 0xa9,
	0xaf, 0xbd, 0x5d, 0x81, 0x05, 0x87, 0x98, 0xe6, 0xbe, 0x5c, 0x88, 0x81, 0x2d, 0xf7, 0xf0, 0x7d,
	0x98, 0xdf, 0x25, 0xd2, 0xb2, 0x44, 0xce, 0xa8, 0x2b, 0x86, 0x11, 0x33, 0x2f, 0xda, 0x34, 0xb2,
	0x43, 0x76, 0x2c, 0xfb, 0x8d, 0x9a, 0xea, 0x75, 0xbf, 0x91, 0xbf, 0x7b, 0x3f, 0x49, 0x8e, 0x8c,
	0xc7, 0xfb, 0x03, 0xca, 0x4e, 0x3c, 0x97, 0xa2, 0x3d, 0x80, 0xf4, 0x8b, 0x05, 0x6d, 0xe5, 0x7c,
	0x4e, 0x7d, 0xca, 0x74, 0xd7, 0xcb, 0x3e, 0x47, 0x38, 0x9e, 0x93, 0x66, 0xd2, 0xaf, 0xa7, 0x82,
	0x99, 0xa9, 0xcf, 0xaa, 0x99, 0x66, 0x7a, 0xbf, 0x59, 0xd0, 0x94, 0x14, 0x60, 0xd0, 0x3d, 0x50,
	0x6d, 0x56, 0xb1, 0xc6, 0x66, 0xd1, 0x66, 0xe6, 0xcb, 0xa0, 0x9b, 0xaf, 0xc5, 0x78, 0x74, 0x9e,
	0x43, 0xf7, 0xa1, 0xa6, 0xc7, 0xf7, 0xc2, 0xe9, 0xfc, 0x50, 0xdf, 0x5d, 0x9d, 0xa2, 0x20, 0x3c,
	0x87, 0xfe, 0x07, 0x8d, 0xe4, 0x43, 0x01, 0x5d, 0x9c, 0xb6, 0x9f, 0x35, 0x50, 0xea, 0xbe, 0xf7,
	0xbd, 0x05, 0xeb, 0xf9, 0x01, 0xdb, 0x5c, 0xeb, 0x5b, 0xf8, 0x5b, 0xc9, 0xf4, 0x8d, 0xfe, 0x9e,
	0x33, 0x33, 0x7b, 0xee, 0xef, 0x5e, 0x3f, 0x5b, 0x31, 0xce, 0x28, 0x89, 0x62, 0x1e, 0xd6, 0xf5,
	0x64, 0xd8, 0x77, 0x84, 0x73, 0x1c, 0x1c, 0x19, 0x14, 0xfb, 0xb0, 0x94, 0x1d, 0x83, 0x51, 0xc9,
	0x2d, 0xba, 0x57, 0xa6, 0x3c, 0x15, 0xa7, 0x52, 0x3c, 0x87, 0x1e, 0xa9, 0x1c, 0x32, 0x9f, 0x03,
	0x53, 0x39, 0x94, 0x1f, 0x8f, 0xbb, 0xa5, 0x43, 0x2b, 0x9e, 0x43, 0xaf, 0xa1, 0x9d, 0x9f, 0x7b,
	0x11, 0xce, 0x69, 0x96, 0xce, 0xd0, 0xdd, 0xed, 0x53, 0x75, 0x92, 0x28, 0xfc, 0x6c, 0xc1, 0xf2,
	0x81, 0x66, 0x57, 0x73, 0xff, 0x01, 0xd4, 0xcd, 0xb8, 0x8a, 0x2e, 0x14, 0x41, 0x67, 0xa7, 0xe6,
	0xee, 0xc5, 0x19, 0xbb, 0x49, 0x04, 0x9e, 0x40, 0x23, 0x99, 0x22, 0x0b, 0xc9, 0x52, 0x1c, 0x67,
	0xbb, 0x5b, 0xb3, 0xb6, 0x13, 0xb0, 0xbf, 0x58, 0xb0, 0x6c, 0xb8, 0xd1, 0x80, 0x7d, 0x0d, 0x1b,
	0xe5, 0x53, 0x58, 0xe9, 0xb3, 0xdd, 0x2c, 0x02, 0x3e, 0x65, 0x7c, 0xc3, 0x73, 0x68, 0x1f, 0x6a,
	0xf1, 0x44, 0x26, 0xd0, 0xb5, 0x7c, 0x2d, 0xcc, 0x9a, 0xd7, 0xba, 0x25, 0xdd, 0x0f, 0xcf, 0xf5,
	0x0e, 0xa1, 0xfd, 0xc2, 0x99, 0x64, 0xf9, 0xa5, 0x0f, 0xd5, 0x78, 0x64, 0x40, 0xdd, 0xbc, 0xe5,
	0xec, 0x08, 0xd3, 0xdd, 0x2c, 0xdd, 0x4b, 0x02, 0x32, 0x82, 0xa5, 0x3d, 0x49, 0xf1, 0xc6, 0xe8,
	0x2b, 0xf9, 0x45, 0x55, 0xd2, 0xe9, 0xd0, 0x8d, 0x42, 0x36, 0xcc, 0xee, 0x86, 0x33, 0x6a, 0xf6,
	0x0d, 0x2c, 0xf7, 0x47, 0xd4, 0x7d, 0x17, 0x44, 0xc9, 0x0d, 0x9e, 0x03, 0xa4, 0x8d, 0xa1, 0x90,
	0xdd, 0x53, 0x8d, 0xb0, 0x7b, 0x69, 0xe6, 0x7e, 0x72, 0x9b, 0xc7, 0xb2, 0x47, 0x18, 0xeb, 0xf7,
	0xa1, 0xba, 0x2f, 0x3f, 0x12, 0x38, 0xda, 0x28, 0xf2, 0xbd, 0xb6, 0x78, 0x6e, 0x4a, 0x6e, 0x2c,
	0xbd, 0xa9, 0xaa, 0xff, 0xb1, 0xfe, 0xf9, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4a, 0xe2, 0xbc,
	0xff, 0xd5, 0x12, 0x00, 0x00,
}
